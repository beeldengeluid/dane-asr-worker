---
apiVersion: apps/v1 # -------------- RUN RABBITMQ ------------------------------
kind: Deployment
metadata:
  name: rabbitmq-deployment
  labels:
    app: dane-rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dane-rabbitmq
  template:
    metadata:
      labels:
        app: dane-rabbitmq
    spec:
      containers:
      - name: dane-rabbitmq-server
        image: rabbitmq:3-management
        ports:
        - containerPort: 15672
        - containerPort: 5672
---
apiVersion: v1
kind: Service
metadata:
  name: dane-rabbitmq-management
spec:
  selector:
    app: dane-rabbitmq
  ports:
    - protocol: TCP
      port: 80
      targetPort: 15672
---
apiVersion: v1
kind: Service
metadata:
  name: dane-rabbitmq-api
spec:
  selector:
    app: dane-rabbitmq
  ports:
    - protocol: TCP
      port: 5672
      targetPort: 5672
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dane-rabbitmq-ingress
spec:
  rules:
  - host: rabbitmq.dane.54.217.179.144.nip.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dane-rabbitmq-management
            port:
              number: 80
  - host: rabbitmq.dane.nl
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dane-rabbitmq-management
            port:
              number: 80
---
apiVersion: apps/v1 # -------------- RUN DANE SERVER (TASK SCHEDULER ONLY) ------------
kind: Deployment
metadata:
  name: dane-server-ts-deployment
  labels:
    app: dane-server-ts
spec:
  replicas: 1 # only one scheduler can run at a time, otherwise the queue will be disrupted!
  selector:
    matchLabels:
      app: dane-server-ts
  template:
    metadata:
      labels:
        app: dane-server-ts
    spec:
      containers:
      - name: dane-server
        image: public.ecr.aws/a0x3r1t1/dane-server:v1.1
        imagePullPolicy: Always
        volumeMounts:
        - name: dane-server-mnt
          mountPath: "/root/.DANE"
          readOnly: true
      volumes:
      - name: dane-server-mnt
        configMap:
          name: dane-server-cfg
---
apiVersion: apps/v1 # -------------- RUN DANE SERVER API -------------------------------
kind: Deployment
metadata:
  name: dane-server-api-deployment
  labels:
    app: dane-server-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: dane-server-api
  template:
    metadata:
      labels:
        app: dane-server-api
    spec:
      containers:
      - name: dane-server-api
        image: public.ecr.aws/a0x3r1t1/dane-server-api:v1.1
        imagePullPolicy: Always
        volumeMounts:
        - name: dane-server-mnt
          mountPath: "/root/.DANE"
          readOnly: true
      volumes:
      - name: dane-server-mnt
        configMap:
          name: dane-server-cfg #Note: same config as task scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: dane-server-api-service
spec:
  selector:
    app: dane-server-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5500
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dane-server-ingress
spec:
  rules:
  - host: api.dane.54.217.179.144.nip.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dane-server-api-service
            port:
              number: 80
  - host: api.dane.nl
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dane-server-api-service
            port:
              number: 80
---
apiVersion: v1 # CLAIM SOME SPACE FROM THE K8s CLUSTER (see k8s-cluster-requirements for the volume)
kind: PersistentVolumeClaim
metadata:
  name: asr-data-pvc
spec:
  storageClassName: local-storage
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 15Gi
---
apiVersion: apps/v1 # DANE ASR worker
kind: Deployment
metadata:
  name: dane-asr-worker-deployment
  labels:
    app: dane-asr-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: dane-asr-worker
  template:
    metadata:
      labels:
        app: dane-asr-worker
    spec:
      containers: #Note: now trying out the multi-container setup, so each worker has its own kaldi container
      - name: dane-asr-worker
        image: public.ecr.aws/a0x3r1t1/dane-asr-worker:v1.4
        imagePullPolicy: Always
        volumeMounts:
        - name: dane-cfg-mnt
          mountPath: "/root/.DANE"
          readOnly: true
        - name: dane-pvc-mnt
          mountPath: "/mnt/dane-fs"
      - name: kaldi-nl-api
        image: jblom/kaldi_nl_api:v1
        imagePullPolicy: Always
        volumeMounts:
        - name: dane-kaldi-api-cfg-mnt
          mountPath: "/src/config"
          readOnly: true
        - name: dane-pvc-mnt
          mountPath: "/mnt/dane-fs" #Note: the dane-asr-worker creates the input & output dir for ASR
      volumes:
      - name: dane-cfg-mnt
        configMap:
          name: dane-asr-worker-cfg
      - name: dane-kaldi-api-cfg-mnt
        configMap:
          name: dane-kaldi-api-cfg
      - name: dane-pvc-mnt # shared by both dane-asr-worker & kaldi-nl-api
        persistentVolumeClaim:
          claimName: asr-data-pvc
---
apiVersion: v1 # service that exposes the kaldi-nl-api for the DANE ASR worker
kind: Service
metadata:
  name: dane-asr-worker-api
spec:
  selector:
    app: dane-asr-worker
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3023
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dane-asr-worker-api-ingress
spec:
  rules:
  - host: kaldi.dane.54.217.179.144.nip.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dane-asr-worker-api
            port:
              number: 80
  - host: kaldi.dane.nl
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dane-asr-worker-api
            port:
              number: 80
---
apiVersion: apps/v1 # DANE download worker
kind: Deployment
metadata:
  name: dane-download-worker-deployment
  labels:
    app: dane-download-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: dane-download-worker
  template:
    metadata:
      labels:
        app: dane-download-worker
    spec:
      hostAliases: # so the download worker can access this host TODO configure
      - ip: "46.23.85.61"
        hostnames:
        - "videohosting.beng.nl"
      containers:
      - name: dane-download-worker
        image: public.ecr.aws/a0x3r1t1/dane-download-worker:v1
        imagePullPolicy: Always
        volumeMounts:
        - name: dane-cfg-mnt
          mountPath: "/root/.DANE"
          readOnly: true
        - name: dane-pvc-mnt
          mountPath: "/mnt/dane-fs"
      volumes:
      - name: dane-cfg-mnt
        configMap:
          name: dane-download-worker-cfg
      - name: dane-pvc-mnt
        persistentVolumeClaim:
          claimName: asr-data-pvc